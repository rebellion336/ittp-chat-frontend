{"version":3,"sources":["webpack:///./component/loan/bindingIdForm.js?5206"],"names":["FormItem","Form","Item","BindingIdForm","props","handleSubmit","bind","event","preventDefault","form","validateFields","err","values","citizenId","customerInfo","id","platform","value","postJSON","fetchChat","console","error","log","getFieldDecorator","textAlign","rules","required","message","validator","validCitizenId","color","WrappedBindingIdForm","create","connect"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,WAAW,kDAAAC,CAAKC,IAAtB;;IAEMC,a;;;AAEF,2BAAYC,KAAZ,EAAkB;AAAA;;AAAA,kIACRA,KADQ;;AAEd,cAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AAFc;AAGjB;;;;;gJAEkBC,K;;;;;;;AACfA,sCAAMC,cAAN;AACA,qCAAKJ,KAAL,CAAWK,IAAX,CAAgBC,cAAhB;AAAA,uJAA+B,iBAAMC,GAAN,EAAWC,MAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4DACtBD,GADsB;AAAA;AAAA;AAAA;;AAAA;AAGZE,iEAHY,GAGCD,MAHD,CAGZC,SAHY;AAAA,8EAIO,OAAKT,KAAL,CAAWU,YAJlB,EAIXC,EAJW,uBAIXA,EAJW,EAINC,QAJM,uBAINA,QAJM;AAKbC,6DALa,GAKL;AACVF,gEAAIA,EADM;AAEVF,uEAAYA,SAFF;AAGVG,sEAAUA;AAHA,yDALK;AAAA;AAAA,+DAUb,oEAAAE,CACC,8DADD,0BAEFD,KAFE,CAVa;;AAAA;AAAA;AAAA,+DAcb,OAAKb,KAAL,CAAWe,SAAX,CAAqB;AACvBJ,kEADuB;AAEvBC;AAFuB,yDAArB,CAda;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAoBnBI,gEAAQC,KAAR;;AApBmB;AAAA;AAAA;;AAAA;AAwBvBD,gEAAQE,GAAR,CAAY,OAAZ;;AAxBuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAA/B;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;iCA6BK;AAAA,gBACGC,iBADH,GACyB,KAAKnB,KAAL,CAAWK,IADpC,CACGc,iBADH;;AAEL,mBACE;AAAC,kEAAD;AAAA,kBAAM,UAAU,KAAKlB,YAArB,EAAmC,OAAO,EAACmB,WAAU,QAAX,EAA1C;AAAA;AAAA;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF;AAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF;AAGE;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAIE;AAAC,4BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACGD,sCAAkB,WAAlB,EAA+B;AAC9BE,+BAAO,CACH;AACIC,sCAAU,IADd;AAEIC,qCAAS;AAFb,yBADG,EAKH;AACIC,uCAAW,yEAAAC;AADf,yBALG;AADuB,qBAA/B,EAWC,4DAAC,mDAAD,IAAO,QAAQ,4DAAC,kDAAD,IAAM,MAAK,QAAX,EAAoB,OAAO,EAAEC,OAAO,iBAAT,EAA3B;AAAA;AAAA;AAAA;AAAA,0BAAf,EAA4E,aAAY,0HAAxF;AAAA;AAAA;AAAA;AAAA,sBAXD;AADH,iBAJF;AAmBE;AAAC,wEAAD;AAAA,sBAAQ,MAAK,SAAb,EAAuB,UAAS,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnBF,aADF;AAyBH;;;;;;;;;EAjEuB,gD;;AAoE5B,IAAMC,uBAAuB,kDAAA9B,CAAK+B,MAAL,GAAc7B,aAAd,CAA7B;;eACe,4DAAA8B,CACX,IADW,EAEX,EAACd,WAAA,oEAAD,EAFW,EAGbY,oBAHa,C;;AAAf;;;;;;;;;;;;4BAvEM/B,Q;4BAEAG,a;4BAoEA4B,oB","file":"3.d578170d3cc904d1090d.hot-update.js","sourcesContent":["import { Component } from 'react'\nimport { Form, Icon, Input, Button } from 'antd'\nimport { connect } from 'react-redux';\nimport {API_SERVER , postJSON} from '../../tools/api'\nimport {validCitizenId} from '../../tools/validators'\nimport { fetchChat } from '../../redux/ducks/chat'\n\nconst FormItem = Form.Item;\n\nclass BindingIdForm extends Component {\n\n    constructor(props){\n        super(props)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n    \n    async handleSubmit(event) {\n        event.preventDefault()\n        this.props.form.validateFields(async(err, values) => {\n            if (!err) {\n                try{\n                    const {citizenId} = values\n                    const { id , platform } = this.props.customerInfo\n                    const value = {\n                        id: id,\n                        citizenId : citizenId,\n                        platform: platform\n                    }\n                    await postJSON(\n                        `${API_SERVER}/chats/line/binding`,\n                        value\n                    )\n                    await this.props.fetchChat({\n                        id,\n                        platform\n                    })\n                }\n                catch(error){\n                    console.error(error)\n                }\n            }\n            else{\n                console.log('Error')\n            }\n        })\n    }\n\n    render() {\n        const { getFieldDecorator } = this.props.form\n        return (\n          <Form onSubmit={this.handleSubmit} style={{textAlign:'center'}} >\n            <br/>\n            <p>ลูกต้าไม่มีประวัติ</p>\n            <br/>\n            <FormItem>\n              {getFieldDecorator('citizenId', {\n                rules: [\n                    { \n                        required: true, \n                        message: 'โปรดใส่เลขบัตรประชาชนของลูกค้า' \n                    },\n                    {\n                        validator: validCitizenId\n                    }\n                ],\n              })(\n                <Input prefix={<Icon type=\"idcard\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"บัตรประชาชนของลูกค้า\" />\n              )}\n            </FormItem>\n            <Button type=\"primary\" htmlType=\"submit\">\n                Binding CitizenId\n            </Button>\n          </Form>\n        );\n    }\n    \n}\nconst WrappedBindingIdForm = Form.create()(BindingIdForm);\nexport default connect(\n    null,\n    {fetchChat}\n)(WrappedBindingIdForm)\n\n\n// WEBPACK FOOTER //\n// ./component/loan/bindingIdForm.js"],"sourceRoot":""}