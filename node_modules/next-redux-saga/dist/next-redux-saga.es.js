import _regeneratorRuntime from 'babel-runtime/regenerator';
import React, { Component } from 'react';
import { END } from 'redux-saga';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function hoc(config) {
  return function (BaseComponent) {
    var WrappedComponent = function (_Component) {
      _inherits(WrappedComponent, _Component);

      function WrappedComponent() {
        _classCallCheck(this, WrappedComponent);

        return _possibleConstructorReturn(this, (WrappedComponent.__proto__ || Object.getPrototypeOf(WrappedComponent)).apply(this, arguments));
      }

      _createClass(WrappedComponent, [{
        key: 'render',
        value: function render() {
          return React.createElement(BaseComponent, this.props);
        }
      }], [{
        key: 'getInitialProps',
        value: function () {
          var _ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(ctx) {
            var isServer, store, props;
            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    isServer = ctx.isServer, store = ctx.store;
                    props = void 0;

                    if (!BaseComponent.getInitialProps) {
                      _context.next = 6;
                      break;
                    }

                    _context.next = 5;
                    return BaseComponent.getInitialProps(ctx);

                  case 5:
                    props = _context.sent;

                  case 6:
                    if (!(config.async && !isServer)) {
                      _context.next = 8;
                      break;
                    }

                    return _context.abrupt('return', props);

                  case 8:

                    // Force saga to end in all other cases
                    store.dispatch(END);
                    _context.next = 11;
                    return store.sagaTask.done;

                  case 11:

                    // Restart saga on the client (sync mode)
                    if (!isServer) {
                      store.runSagaTask();
                    }

                    return _context.abrupt('return', props);

                  case 13:
                  case 'end':
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function getInitialProps(_x) {
            return _ref.apply(this, arguments);
          }

          return getInitialProps;
        }()
      }]);

      return WrappedComponent;
    }(Component);

    return WrappedComponent;
  };
}

function withReduxSaga(arg) {
  var defaultConfig = { async: false };

  if (typeof arg === 'function') {
    return hoc(defaultConfig)(arg);
  }

  return hoc(_extends({}, defaultConfig, arg));
}

export default withReduxSaga;
//# sourceMappingURL=next-redux-saga.es.js.map
